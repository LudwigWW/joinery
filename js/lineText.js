
let ascii_text_points = [
    [0,16,15,0,0,	//Ascii32
        []],
    [8,10,15,0,0,	//Ascii33
        [5,21,5,7,-1,-1,5,2,4,1,5,0,6,1,5,2]],
    [5,16,15,0,0,	//Ascii34
        [4,21,4,14,-1,-1,12,21,12,14]],
    [11,21,15,0,0,	//Ascii35
        [11,25,4,-7,-1,-1,17,25,10,-7,-1,-1,4,12,18,12,-1,-1,3,6,17,6]],
    [26,20,15,0,0,	//Ascii36
        [8,25,8,-4,-1,-1,12,25,12,-4,-1,-1,17,18,15,20,12,21,8,21,5,20,3,18,3,16,4,14,5,13,7,12,13,10,15,9,16,8,17,6,17,3,15,1,12,0,8,0,5,1,3,3]],
    [31,24,15,0,0,	//Ascii37
        [21,21,3,0,-1,-1,8,21,10,19,10,17,9,15,7,14,5,14,3,16,3,18,4,20,6,21,8,21,10,20,13,19,16,19,19,20,21,21,-1,-1,17,7,15,6,14,4,14,2,16,0,18,0,20,1,21,3,21,5,19,7,17,7]],
    [34,26,15,0,0,	//Ascii38
        [23,12,23,13,22,14,21,14,20,13,19,11,17,6,15,3,13,1,11,0,7,0,5,1,4,2,3,4,3,6,4,8,5,9,12,13,13,14,14,16,14,18,13,20,11,21,9,20,8,18,8,16,9,13,11,10,16,3,18,1,20,0,22,0,23,1,23,2]],
    [7,10,15,0,0,	//Ascii39
        [5,19,4,20,5,21,6,20,6,18,5,16,4,15]],
    [10,14,15,0,0,	//Ascii40
        [11,25,9,23,7,20,5,16,4,11,4,7,5,2,7,-2,9,-5,11,-7]],
    [10,14,15,0,0,	//Ascii41
        [3,25,5,23,7,20,9,16,10,11,10,7,9,2,7,-2,5,-5,3,-7]],
    [8,16,15,0,0,	//Ascii42
        [8,21,8,9,-1,-1,3,18,13,12,-1,-1,13,18,3,12]],
    [5,26,17,0,0,	//Ascii43
        [13,18,13,0,-1,-1,4,9,22,9]],
    [8,10,15,0,0,	//Ascii44
        [6,1,5,0,4,1,5,2,6,1,6,-1,5,-3,4,-4]],
    [2,26,19,0,0,	//Ascii45
        [4,9,22,9]],
    [5,10,15,0,0,	//Ascii46
        [5,2,4,1,5,0,6,1,5,2]],
    [2,22,15,0,0,	//Ascii47
        [20,25,2,-7]],
    [17,20,15,0,0,	//Ascii48
        [9,21,6,20,4,17,3,12,3,9,4,4,6,1,9,0,11,0,14,1,16,4,17,9,17,12,16,17,14,20,11,21,9,21]],
    [4,20,15,0,0,	//Ascii49
        [6,17,8,18,11,21,11,0]],
    [14,20,15,0,0,	//Ascii50
        [4,16,4,17,5,19,6,20,8,21,12,21,14,20,15,19,16,17,16,15,15,13,13,10,3,0,17,0]],
    [15,20,15,0,0,	//Ascii51
        [5,21,16,21,10,13,13,13,15,12,16,11,17,8,17,6,16,3,14,1,11,0,8,0,5,1,4,2,3,4]],
    [6,20,15,0,0,	//Ascii52
        [13,21,3,7,18,7,-1,-1,13,21,13,0]],
    [17,20,15,0,0,	//Ascii53
        [15,21,5,21,4,12,5,13,8,14,11,14,14,13,16,11,17,8,17,6,16,3,14,1,11,0,8,0,5,1,4,2,3,4]],
    [23,20,15,0,0,	//Ascii54
        [16,18,15,20,12,21,10,21,7,20,5,17,4,12,4,7,5,3,7,1,10,0,11,0,14,1,16,3,17,6,17,7,16,10,14,12,11,13,10,13,7,12,5,10,4,7]],
    [5,20,15,0,0,	//Ascii55
        [17,21,7,0,-1,-1,3,21,17,21]],
    [29,20,15,0,0,	//Ascii56
        [8,21,5,20,4,18,4,16,5,14,7,13,11,12,14,11,16,9,17,7,17,4,16,2,15,1,12,0,8,0,5,1,4,2,3,4,3,7,4,9,6,11,9,12,13,13,15,14,16,16,16,18,15,20,12,21,8,21]],
    [23,20,15,0,0,	//Ascii57
        [16,14,15,11,13,9,10,8,9,8,6,9,4,11,3,14,3,15,4,18,6,20,9,21,10,21,13,20,15,18,16,14,16,9,15,4,13,1,10,0,8,0,5,1,4,3]],
    [11,10,15,0,0,	//Ascii58
        [5,14,4,13,5,12,6,13,5,14,-1,-1,5,2,4,1,5,0,6,1,5,2]],
    [14,10,15,0,0,	//Ascii59
        [5,14,4,13,5,12,6,13,5,14,-1,-1,6,1,5,0,4,1,5,2,6,1,6,-1,5,-3,4,-4]],
    [3,24,15,0,0,	//Ascii60
        [20,18,4,9,20,0]],
    [5,26,15,0,0,	//Ascii61
        [4,12,22,12,-1,-1,4,6,22,6]],
    [3,24,15,0,0,	//Ascii62
        [4,18,20,9,4,0]],
    [20,18,15,0,0,	//Ascii63
        [3,16,3,17,4,19,5,20,7,21,11,21,13,20,14,19,15,17,15,15,14,13,13,12,9,10,9,7,-1,-1,9,2,8,1,9,0,10,1,9,2]],
    [55,27,15,0,0,	//Ascii64
        [18,13,17,15,15,16,12,16,10,15,9,14,8,11,8,8,9,6,11,5,14,5,16,6,17,8,-1,-1,12,16,10,14,9,11,9,8,10,6,11,5,-1,-1,18,16,17,8,17,6,19,5,21,5,23,7,24,10,24,12,23,15,22,17,20,19,18,20,15,21,12,21,9,20,7,19,5,17,4,15,3,12,3,9,4,6,5,4,7,2,9,1,12,0,15,0,18,1,20,2,21,3,-1,-1,19,16,18,8,18,6,19,5]],
    [8,18,15,0,0,	//Ascii65
        [9,21,1,0,-1,-1,9,21,17,0,-1,-1,4,7,14,7]],
    [23,21,15,0,0,	//Ascii66
        [4,21,4,0,-1,-1,4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,11,-1,-1,4,11,13,11,16,10,17,9,18,7,18,4,17,2,16,1,13,0,4,0]],
    [18,21,15,0,0,	//Ascii67
        [18,16,17,18,15,20,13,21,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5]],
    [15,21,15,0,0,	//Ascii68
        [4,21,4,0,-1,-1,4,21,11,21,14,20,16,18,17,16,18,13,18,8,17,5,16,3,14,1,11,0,4,0]],
    [11,19,15,0,0,	//Ascii69
        [4,21,4,0,-1,-1,4,21,17,21,-1,-1,4,11,12,11,-1,-1,4,0,17,0]],
    [8,18,15,0,0,	//Ascii70
        [4,21,4,0,-1,-1,4,21,17,21,-1,-1,4,11,12,11]],
    [22,21,15,0,0,	//Ascii71
        [18,16,17,18,15,20,13,21,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,18,8,-1,-1,13,8,18,8]],
    [8,22,15,0,0,	//Ascii72
        [4,21,4,0,-1,-1,18,21,18,0,-1,-1,4,11,18,11]],
    [2,8,15,0,0,	//Ascii73
        [4,21,4,0]],
    [10,16,15,0,0,	//Ascii74
        [12,21,12,5,11,2,10,1,8,0,6,0,4,1,3,2,2,5,2,7]],
    [8,21,15,0,0,	//Ascii75
        [4,21,4,0,-1,-1,18,21,4,7,-1,-1,9,12,18,0]],
    [5,17,15,0,0,	//Ascii76
        [4,21,4,0,-1,-1,4,0,16,0]],
    [11,24,15,0,0,	//Ascii77
        [4,21,4,0,-1,-1,4,21,12,0,-1,-1,20,21,12,0,-1,-1,20,21,20,0]],
    [8,22,15,0,0,	//Ascii78
        [4,21,4,0,-1,-1,4,21,18,0,-1,-1,18,21,18,0]],
    [21,22,15,0,0,	//Ascii79
        [9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,19,8,19,13,18,16,17,18,15,20,13,21,9,21]],
    [13,21,15,0,0,	//Ascii80
        [4,21,4,0,-1,-1,4,21,13,21,16,20,17,19,18,17,18,14,17,12,16,11,13,10,4,10]],
    [24,22,15,0,0,	//Ascii81
        [9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,19,8,19,13,18,16,17,18,15,20,13,21,9,21,-1,-1,12,4,18,-2]],
    [16,21,15,0,0,	//Ascii82
        [4,21,4,0,-1,-1,4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,11,4,11,-1,-1,11,11,18,0]],
    [20,20,15,0,0,	//Ascii83
        [17,18,15,20,12,21,8,21,5,20,3,18,3,16,4,14,5,13,7,12,13,10,15,9,16,8,17,6,17,3,15,1,12,0,8,0,5,1,3,3]],
    [5,16,15,0,0,	//Ascii84
        [8,21,8,0,-1,-1,1,21,15,21]],
    [10,22,15,0,0,	//Ascii85
        [4,21,4,6,5,3,7,1,10,0,12,0,15,1,17,3,18,6,18,21]],
    [5,18,15,0,0,	//Ascii86
        [1,21,9,0,-1,-1,17,21,9,0]],
    [11,24,15,0,0,	//Ascii87
        [2,21,7,0,-1,-1,12,21,7,0,-1,-1,12,21,17,0,-1,-1,22,21,17,0]],
    [5,20,15,0,0,	//Ascii88
        [3,21,17,0,-1,-1,17,21,3,0]],
    [6,18,15,0,0,	//Ascii89
        [1,21,9,11,9,0,-1,-1,17,21,9,11]],
    [8,20,15,0,0,	//Ascii90
        [17,21,3,0,-1,-1,3,21,17,21,-1,-1,3,0,17,0]],
    [11,14,15,0,0,	//Ascii91
        [4,25,4,-7,-1,-1,5,25,5,-7,-1,-1,4,25,11,25,-1,-1,4,-7,11,-7]],
    [2,14,15,0,0,	//Ascii92
        [0,21,14,-3]],
    [11,14,15,0,0,	//Ascii93
        [9,25,9,-7,-1,-1,10,25,10,-7,-1,-1,3,25,10,25,-1,-1,3,-7,10,-7]],
    [10,16,15,0,0,	//Ascii94
        [6,15,8,18,10,15,-1,-1,3,12,8,17,13,12,-1,-1,8,17,8,0]],
    [2,16,15,0,0,	//Ascii95
        [0,-2,16,-2]],
    [7,10,15,0,0,	//Ascii96
        [6,21,5,20,4,18,4,16,5,15,6,16,5,17]],
    [17,19,15,0,0,	//Ascii97 --> a
        [15,14,15,0,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],
    [17,19,16,0,0,	//Ascii98 --> b
        [4,21,4,0,-1,-1,4,11,6,13,8,14,11,14,13,13,15,11,16,8,16,6,15,3,13,1,11,0,8,0,6,1,4,3]],
    [14,18,16,0,1,	//Ascii99 --> c
        [15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],
    [17,19,16,0,0,	//Ascii100
        [15,21,15,0,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],
    [17,18,15,0,1,	//Ascii101 --> e
        [3,8,15,8,15,10,14,12,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],
    [8,12,11,0,6,	//Ascii102
        [10,21,8,21,6,20,5,17,5,0,-1,-1,2,14,9,14]],
    [22,19,15,0,0,	//Ascii103 --> g
        [15,14,15,-2,14,-5,13,-6,11,-7,8,-7,6,-6,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],
    [10,19,15,0,0,	//Ascii104 --> h
        [4,21,4,0,-1,-1,4,10,7,13,9,14,12,14,14,13,15,10,15,0]],
    [8,8,6,0,10,	//Ascii105 --> i
        [3,21,4,20,5,21,4,22,3,21,-1,-1,4,14,4,0]],
    [11,10,8,0,9,	//Ascii106 --> j
        [5,21,6,20,7,21,6,22,5,21,-1,-1,6,14,6,-3,5,-6,3,-7,1,-7]],
    [8,17,16,0,2,	//Ascii107 --> k
        [4,21,4,0,-1,-1,14,14,4,4,-1,-1,8,8,15,0]],
    [2,8,8,0,10,	//Ascii108 --> l
        [4,21,4,0]],
    [18,30,27,0,-12,	//Ascii109
        [4,14,4,0,-1,-1,4,10,7,13,9,14,12,14,14,13,15,10,15,0,-1,-1,15,10,18,13,20,14,23,14,25,13,26,10,26,0]],
    [10,19,15,0,-1,	//Ascii110
        [4,14,4,0,-1,-1,4,10,7,13,9,14,12,14,14,13,15,10,15,0]],
    [17,19,17,0,0,	//Ascii111 --> o
        [8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3,16,6,16,8,15,11,13,13,11,14,8,14]],
    [17,19,15,0,0,	//Ascii112
        [4,14,4,-7,-1,-1,4,11,6,13,8,14,11,14,13,13,15,11,16,8,16,6,15,3,13,1,11,0,8,0,6,1,4,3]],
    [17,19,15,0,0,	//Ascii113
        [15,14,15,-7,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],
    [8,13,11,0,5,	//Ascii114 --> r
        [4,14,4,0,-1,-1,4,8,5,11,7,13,9,14,12,14]],
    [17,17,13,0,2,	//Ascii115
        [14,11,13,13,10,14,7,14,4,13,3,11,4,9,6,8,11,7,13,6,14,4,14,3,13,1,10,0,7,0,4,1,3,3]],
    [8,12,11,0,7,	//Ascii116
        [5,21,5,4,6,1,8,0,10,0,-1,-1,2,14,9,14]],
    [10,19,17,0,0,	//Ascii117
        [4,14,4,4,5,1,7,0,10,0,12,1,15,4,-1,-1,15,14,15,0]],
    [5,16,15,0,2,	//Ascii118
        [2,14,8,0,-1,-1,14,14,8,0]],
    [11,22,19,0,-4,	//Ascii119
        [3,14,7,0,-1,-1,11,14,7,0,-1,-1,11,14,15,0,-1,-1,19,14,15,0]],
    [5,17,15,0,1,	//Ascii120
        [3,14,14,0,-1,-1,14,14,3,0]],
    [9,16,14,0,3,	//Ascii121
        [2,14,8,0,-1,-1,14,14,8,0,6,-4,4,-6,2,-7,1,-7]],
    [8,17,15,0,2,	//Ascii122 --> z
        [14,14,3,0,-1,-1,3,14,14,14,-1,-1,3,0,14,0]],
    [39,14,15,0,0,	//Ascii123
        [9,25,7,24,6,23,5,21,5,19,6,17,7,16,8,14,8,12,6,10,-1,-1,7,24,6,22,6,20,7,18,8,17,9,15,9,13,8,11,4,9,8,7,9,5,9,3,8,1,7,0,6,-2,6,-4,7,-6,-1,-1,6,8,8,6,8,4,7,2,6,1,5,-1,5,-3,6,-5,7,-6,9,-7]],
    [2,8,15,0,0,	//Ascii124
        [4,25,4,-7]],
    [39,14,15,0,0,	//Ascii125
        [5,25,7,24,8,23,9,21,9,19,8,17,7,16,6,14,6,12,8,10,-1,-1,7,24,8,22,8,20,7,18,6,17,5,15,5,13,6,11,10,9,6,7,5,5,5,3,6,1,7,0,8,-2,8,-4,7,-6,-1,-1,8,8,6,6,6,4,7,2,8,1,9,-1,9,-3,8,-5,7,-6,5,-7]],
    [23,24,15,0,0,	//Ascii126
        [3,6,3,8,4,11,6,12,8,12,10,11,14,8,16,7,18,7,20,8,21,10,-1,-1,3,8,4,10,6,11,8,11,10,10,14,7,16,6,18,6,20,7,21,10,21,12]]
];


// generate text polygon
function generateAsciiPolygons(text, start_x, start_y, text_rotation, text_size) {
    function finishPoly(points) {
        // let asciiPolygon = base.newPolygon(points);
        let asciiPath = new Path(points);
        // asciiPolygon.depth = 0;
        // asciiPolygon.open = true;
        return asciiPath;
    }

    let singleAsciiPolyList = [];

    let rotation = text_rotation;
    let angular_rotation = rotation * Math.PI / 180;
    let distance_iterator = 0; 
    let combined_division_pos_counter = 0;
    let combined_division_list = [0];
    for (let char of text) {
        let char_int = char.charCodeAt(0);
        if (char_int == 32) {
            distance_iterator += ascii_text_points[char_int][2]*1.25;
            continue;
        }
        let char_pos = char_int-32;

        let ascii_location_array = ascii_text_points[char_pos][5];
        let division_pos_counter = 0;
        let division_list = [0];
        let temp_points = [];
        let scale_factor = text_size/20 * 0.3;
        
        // Collect all and rotate as combination
        for (let point_idx = 0; point_idx < ascii_location_array.length; point_idx = point_idx + 2) {
            if (ascii_location_array[point_idx] == -1) {
                division_list.push(division_pos_counter); // Start of next segment location
                combined_division_list.push(combined_division_pos_counter); // Start of next word location
            }
            else {
                let point_ascii = new Point(scale_factor*(
                                                ascii_location_array[point_idx] +  // X-location
                                                ascii_text_points[char_pos][3] + // X-location adjustment
                                                (distance_iterator)*Math.cos(angular_rotation)) + 
                                            start_x, 

                                            scale_factor*(
                                                ascii_location_array[point_idx+1] + // Y-location
                                                //ascii_text_points[char_pos][4] + // Y-location adjustment
                                                (distance_iterator)*Math.sin(angular_rotation)) + 
                                                
                                            start_y, 

                                            0);
                let point_ascii2 = new Point(scale_factor*(
                                                ascii_location_array[point_idx] +  // X-location
                                                ascii_text_points[char_pos][3] + // X-location adjustment
                                                (distance_iterator)*1 ) + //Math.cos(angular_rotation)) + 
                                            start_x, 

                                            scale_factor*(
                                                -1*ascii_location_array[point_idx+1] + // Y-location
                                                //ascii_text_points[char_pos][4] + // Y-location adjustment
                                                0*(distance_iterator)*Math.sin(angular_rotation)) + 
                                                
                                            start_y, 

                                            0);
                temp_points.push(point_ascii);
                singleAsciiPolyList.push(point_ascii2);
                division_pos_counter++;
                combined_division_pos_counter++;
            }
        }
        division_list.push(division_pos_counter); 
        combined_division_list.push(combined_division_pos_counter); 

        distance_iterator += ascii_text_points[char_pos][2]*1.25;
    }

    let singleAsciiPoly = finishPoly(singleAsciiPolyList);
    let midpoint = new Point(start_x, start_y, 0);
    let inverse_midpoint_vector = new Point(0-start_x, 0-start_y, 0);

    let translation_poly_copyx = [...singleAsciiPoly.segments];
    // singleAsciiPoly.points = singleAsciiPoly.translatePoints(translation_poly_copyx, inverse_midpoint_vector);
    // singleAsciiPoly.translate(inverse_midpoint_vector);
    
    singleAsciiPoly = singleAsciiPoly.rotate(rotation, midpoint);

    let translation_poly_copy2x = [...singleAsciiPoly.segments];
    // singleAsciiPoly.points = singleAsciiPoly.translatePoints(translation_poly_copy2x, midpoint);
    // singleAsciiPoly.translate(midpoint);

    console.log({singleAsciiPoly:singleAsciiPoly, combined_division_list:combined_division_list});


    let combinedAsciiPolyList = [];
    var g = new Group();

    for (let division_idx = 0; division_idx < combined_division_list.length-1; division_idx++){
        let yet_another_temp_point_list = [];
        for (let point_idx = combined_division_list[division_idx]; point_idx < combined_division_list[division_idx+1]; point_idx++) {
            // yet_another_temp_point_list.push(singleAsciiPoly.points[point_idx]);
            yet_another_temp_point_list.push(singleAsciiPoly.segments[point_idx]);
        }
        var oneLetterPoly = finishPoly(yet_another_temp_point_list);
        console.log({oneLetterPoly:oneLetterPoly});
        // combinedAsciiPolyList.push(finishPoly(yet_another_temp_point_list));
        g.addChildren([oneLetterPoly]);
    }
    

    // return combinedAsciiPolyList;
    return g;
}